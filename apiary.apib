FORMAT: 1A

# AMP-epsilon
All api datetime format (Timezone: +00:00): **YYYY-MM-DDThh:mm:ssTZD** (ISO 8601)

For example: **2014-02-22T19:20:21+00:00**

AMP platform will support the following API:

# Group API Authentication
To make requests to api, you will need to set an authorization header:

+ Basic authentication for public resources: 

    **Basic-Authorization: Basic {base 64 encoded string of "##apollo2015##" string}**

+ JSON Web Token Authentication for protected resources:

    **Authorization: Bearer {yourtokenhere}**

# Group HTTP Status Codes
When a HTTP request return error, the HTTP status codes should be in follow list:

+ Code **401**: user unauthorized or token expired.
+ Code **404**: data not found error.
+ Code **415**: Unsupported Media Type. This error will happen when user upload file is not an image.
+ Code **405**: all errors related to method synctax.
+ Code **500**: other error. This error should be attached a error message (ex: **{"message": "error message"}**).

# Group HTTP JSON Reponse
Response template:

    {
        "message": "...", // General message | String
        "errors": "...",  // Error details | Json
        "data": "..."     // Reponse data | Json/ArrayOfJson

    }
    
Ex with errors:

    {
        "message": "Could not create new user.",
        "errors": {
            "username": [
                "The username field is required."
            ],
            "password": [
                "The password field is required."
            ]
        },
        "data": " "
    }
    
Ex without errors:

    {
        "message": "User has been created.",
        "errors": null,
        "data": {
            "id": "1", 
            "name": "Loc"
        }
    }
    
# Group API Types
## Article type[type_id]
    1 = Article
    2 = Blog
    3 = Lesson
    
## Gender[gender]
    1 = Male
    2 = Female
    
## Event's status id[status_id]
    1 = Open
    2 = Closed

## User Type[user_type]
    1 = Admin
    2 = Coach
    3 = Member
    4 = Community
    
## User status id[status_id]
    1 = Published
    2 = Unpublished

## User's discussion histories type[action]
    CREATE
    ANSWER
    
## User's action action id[action_id]    
    1 = SHARE
    2 = FOLLOW (interested)
    3 = UNFOLLOW (uninterested)
    4 = RATE
    5 = JOIN
    6 = UNJOIN
    7 = HIDE
    8 = SHOW

## User's action target type id[target_type_id]
    1 = Article
    2 = Blog
    3 = Lesson
    4 = User 
    5 = Event
    6 = Recommendation

# Group Tags
## Tags Collection [/articles/tags]
### List all article tags [GET]
+ Response 200 (application/json)

        {
            "message": null,
            "errors": null,
            "data": [
                {"id": "1", "name": "mobile"}, 
                {"id": "2", "name": "computer"},
                {"id": "3", "name": "computer 3"},
                {"id": "4", "name": "computer 4"},
                {"id": "5", "name": "computer 5"},
                {"id": "6", "name": "computer 6"}
            ]
        }

# Group Articles
## Articles Collection [/articles/{?type_id}{?page}{?per_page}{?sort}{?order}{?tag_id}]
### List all articles [GET]
+ Parameters
    + type_id (required, String, `1` ) ... type of article. 1: Article, 2: Blog, 3: Lesson.
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    + sort (optional, string, `title` ) ... sort by field name. Ex: id, title, created_at
    + order (optional, string, `desc` ) ... Sort direction. Only allow 'desc|asc'
    + tag_id (optional, string, `mobile,pc` ) ... List of filter tag's id.
    
+ Response 200 (application/json)

        {
            "error": null, 
            "message": null, 
            "data": [
                {
                    "id": "1", 
                    "title": "title 2", 
                    "summary": "summary 1", 
                    "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg", 
                    "share_count": 100, 
                    "view_count": 120, 
                    "rating_average": 3.5, 
                    "rating_count": 120,
                    "comment_count": 100, 
                    "type_id": 1,
                    "created_at": "2014-02-23T19:20+00:00",
                    "tags": [
                        {"id": 2, "name": "computer"}
                    ]
                },
                {
                    "id": "2", 
                    "title": "title 2", 
                    "summary": "summary 1", 
                    "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg", 
                    "share_count": 100, 
                    "view_count": 120, 
                    "rating_average": 4.5, 
                    "rating_count": 120,
                    "comment_count": 100, 
                    "type_id": 1,
                    "created_at": "2014-02-23T15:20+00:00",
                    "tags": [
                        {"id": 2, "name": "computer"}
                    ]
                },
                {
                    "id": "3", 
                    "title": "title 3", 
                    "summary": "summary 1", 
                    "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg", 
                    "share_count": 100, 
                    "view_count": 120, 
                    "rating_average": 5, 
                    "rating_count": 120,
                    "type_id": 1,
                    "comment_count": 100, 
                    "created_at": "2014-02-22T19:20+00:00",
                    "tags": [
                        {"id": 2, "name": "computer"}
                    ]
                }
            ]
        }

## Article [/articles/{articleId}]
### Get Article Detail [GET]
+ Parameters
    + articleId (string) ... ID of article.
+ Response 200 (application/json)

        {
            "message": null,
            "errors": null,
            "data": {
                    "id": 1,
                    "title": "title",
                    "summary": "summary 1",
                    "content": "html content",
                    "share_count": 100, 
                    "view_count": 120, 
                    "rating_average": 3.5, 
                    "rating_count": 120,
                    "comment_count": 100,
                    "type_id": 1,
                    "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg", 
                    "created_by": 1,
                    "created_at": "2014-02-22T19:20+00:00",
                    "tags": [
                        {"id": 2, "name": "computer"}
                    ],
                    "has_quiz": true,
                    "has_poll": true
                }
        }

## Article [/articles/{articleId}/statistic]
### Get Article Statistic [GET]
+ Parameters
    + articleId (string) ... ID of article.
+ Response 200 (application/json)

        {
            "message": null,
            "errors": null,
            "data": {
                "id": "1",
                "share_count": 100, 
                "view_count": 120, 
                "rating_average": 3.5, 
                "rating_count": 120,
                "comment_count": 100
            }
        }

        
# Group Comments
## Comments Collection [/articles/{articleId}/comments]
### List all Article's comments [GET]
+ Parameters
    + articleId (required, string) ... ID of article.
+ Response 200 (application/json)

        {
            "message": null,
            "erros": null,
            "data": [
                {
                    "id": 1, 
                    "content": "comment for article 1", 
                    "parent_id": "", 
                    "created_at": "2014-02-22T19:20+00:00",
                    "created_by_user": {
                        "id": 3, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1, 
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title"
                    }
                },
                {
                    "id": 2, 
                    "content": "comment for article 1", 
                    "parent_id": "", 
                    "created_at": "2014-02-22T19:20+00:00",
                    "created_by_user": {
                        "id": 3, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1, 
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title"
                    }
                }
            ]
        }
        
### Create a comment [POST]
+ Request (application/json)

        {"content": "this is a comment", "parent_id": "1"}

+ Response 200 (application/json)

        {
            "message": "Comment {id} has been created",
            "errors": null,
            "data": {
                "id": 2, 
                "created_at": "2014-02-22T19:20+00:00"
            }
        }
        
## Comment [/articles/{articleId}/comments/{commentId}]
### Delete a comment [DELETE]
+ Parameters
    + articleId (required, string) ... ID of article.
    + commentId (required, string) ... ID of comment.
+ Request (application/json)
        
+ Response 200

        {
            "message": "Comment {id} has been deleted",
            "errors": null,
            "data": null
        }

# Group Quiz
Every question of a Quiz or a Poll has 2 type: SINGLE_CHOICE and MULTI_CHOICE.
For each question, when user select some options, we may provide an immediately feedback based on their choices.
For example:

**What are the correct actions?**

a- Action A

b- Action B

c- Action C

d- Action D

If user select Action A, the system may produce immediate feedback such as "This is not a correct action". 
The message can be in red or green, based on the feedback's status field. Right now, we support two status: 
**positive** for green color and **negative** for red color.

## Quiz [/quiz/{articleId}]
### List all question of quiz [GET]
+ Response 200 (application/json)

        [
            {
            "id": "1", 
            "type": "SINGLE_CHOICE" ,
            "question": "Question 1", 
            "feedback_messages" : [
                { "id": "1", "option_ids": ["1", "2"], "message" : "This is a correct answer", "status" : "positive"},
                { "id": "2", "option_ids": ["2"], "message" : "This is not a correct answer", "status" : "negative"}
            ],
            "option_list": [
                {"id": "1", "text": "text for quiz 1"},
                {"id": "2", "text": "text for quiz 2"},
                {"id": "3", "text": "text for quiz 3"}
            ]
            }, 
            {
            "id", "2", 
            "type": "MULTI_CHOICE" ,
            "question": "Question 2", 
            "option_list": [
                {"id": "4", "text": "text for quiz 1"},
                {"id": "5", "text": "text for quiz 2"},
                {"id": "6", "text": "text for quiz 3"},
                {"id": "7", "text": "text for quiz 3"},
            ]
            },
        ]

## Quiz Submit [/quiz/{articleId}/submit]
### submit quiz result [POST]
+ Request (application/json)

        [
            {
            "id": "1",
            "choices": [ 
                { "id" : "1" }
                ]
            },
            {
            "id": "2",
            "choices": [ 
                { "id" : "1" },
                { "id" : "2" }
                ]
            }
        ]

+ Response 200

# Group Polls
## Poll [/polls/{articleId}]
### List all question of poll [GET]
+ Response 200 (application/json)

        [
            {
            "id": "1", 
            "type": "SINGLE_CHOICE" ,
            "question": "Question 1", 
            "feedback_messages" : [
                {"option_ids": ["1", "2"], "message" : "This is not a correct answer", "status" : "positive"},
                {"option_ids": ["2"], "message" : "This is not a correct answer", "status" : "negative"}
            ],
            "option_list": [
                {"id": "1", "text": "text for quiz 1"},
                {"id": "2", "text": "text for quiz 2"},
                {"id": "3", "text": "text for quiz 3"}
            ]
            }, 
            {
            "id", "2", 
            "type": "MULTI_CHOICE" ,
            "question": "Question 2", 
            "option_list": [
                {"id": "4", "text": "text for quiz 1"},
                {"id": "5", "text": "text for quiz 2"},
                {"id": "6", "text": "text for quiz 3"},
                {"id": "7", "text": "text for quiz 3"},
            ]
            },
        ]

## Poll Submit [/polls/{articleId}/submit]
### Submit poll result [POST]
+ Request (application/json)

        [
            {
            "id": "1",
            "choices": [ 
                { "id" : "1" }
                ]
            },
            {
            "id": "2",
            "choices": [ 
                { "id" : "1" },
                { "id" : "2" }
                ]
            }
        ]

+ Response 200

## Poll Statistic [/polls/{articleId}/statistic]
### Get Poll statistic [GET]
+ Response 200
    
        {
            "min": 0,
            "max": 100,
            "title": "Chart title",
            "chart_data": [
                {"lable": "1", "value": 20},
                {"lable": "2", "value": 30},
                {"lable": "3", "value": 40},
                {"lable": "4", "value": 10},
            ]
        }

# Group Events
Each event has 3 states: OPEN, ONGOING, CLOSED.

## Events Collection [/events/{?page}{?per_page}{?sort}{?filter}]
### List all Events [GET]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    + sort (optional, number, `1` ) ... sort type of list. 1: Newest (last 48 hours), 2: Attendant: low to high, 3: Attendant: high to low.
    + filter (optional, string, `mobile,pc` ) ... List of filter tag's IDs.

+ Response 200 (application/json)

        {
            "error": null, 
            "message": null, 
            "data":[
                    {
                        "id": "1",
                        "name": "event name 1",
                        "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg",
                        "start_time": "2014-02-20T19:20+00:00",
                        "end_time": "2014-02-22T19:20+00:00",
                        "latitude": 10.000,
                        "longitude": 104.001,
                        "address": "165, hai ba trung",
                        "status": "OPEN",
                        "joined": false,
                        "attendee": 100,
                        "interesting_count": 100,
                        "interested_count": 50
                    },
                    {
                        "id": "2",
                        "name": "event name 1 - event ongoing",
                        "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg",
                        "start_time": "2014-02-20T19:20+00:00",
                        "end_time": "2014-02-22T19:20+00:00",
                        "latitude": 10.000,
                        "longitude": 104.001,
                        "address": "165, hai ba trung",
                        "status": "ONGOING",
                        "joined": false,
                        "attendee": 100,
                        "interesting_count": 100,
                        "interested_count": 50
                    },
                    {
                        "id": "3",
                        "name": "event name - user joined",
                        "thumb": "http://img.gettyimageslatam.com/public/userfiles/redesign/images/landing/home/img_entry_002.jpg",
                        "start_time": "2014-02-20T19:20+00:00",
                        "end_time": "2014-02-22T19:20+00:00",
                        "latitude": 10.000,
                        "longitude": 104.001,
                        "address": "165, hai ba trung",
                        "status": "CLOSED",
                        "joined": true,
                        "attendee": 100,
                        "interesting_count": 100,
                        "interested_count": 50
                    }
                ]
        }
        
## Event [/events/{eventId}]
### Get Event's detail [GET]
+ Response 200 (application/json)

        {
            "id": "1",
            "detail": "event detail",
            "name": "event name - user joined",
            "thumb": "image link"
            "start_time": "2014-02-20T19:20+00:00",
            "end_time": "2014-02-22T19:20+00:00",
            "latitude": 10.000,
            "longitude": 104.001,
            "address": "165, hai ba trung",
            "status": "CLOSED",
            "joined": "true",
            "attendee": 100,
            "interesting_count": 100,
            "interested_count": 50
        }
        
## Event [/events/{eventId}/statistic]
### Get Event's statistic [GET]
+ Response 200 (application/json)

        {
            "id": "1",
            "status": "CLOSED",
            "attendee": 100,
            "interesting_count": 100,
            "interested_count": 50
        }

## Event's feedback [/events/{eventId}/feedback]
Event's feedback has 2 types TEXT, SINGLE_CHOICE and MULTI_CHOICE
Option's type can be **INPUT** or **LABEL**

### Get event feedback [GET]
+ Response 200 (application/json)

        {
            "question": "question for feedback",
            "type": "SINGLE_CHOICE",
            "option_list": [
                {"id": "1", "type" : "INPUT", "text": "option 1"},
                {"id": "2", "type" : "INPUT", "text": "option 2"},
                {"id": "3","type" : "INPUT",  "text": "option 3"},
            ]
        }
        
## Event's feedback submit [/events/{eventId}/feedback/submit]
### Submit event's feedback [POST]
+ Response 200 (application/json)

        [ 
        { "id" : "1" },
        { "id" : "2" },
        { "id" : "3", "value" : "This is not a good place for event"}
        ]
        
# Group Discussions
## Discussions Collection [/discussions/{?page}{?per_page}]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    
### Get all Discussions with 2 latest messages [GET]
+ Response 200 (application/json)

        {
            "errors":null, 
            "message":"", 
            "data":[
                {
                    "id": 1,
                    "title": "title",
                    "description": "discussion description",
                    "messages": [
                        {"id": 1, "message": "message content 1", "user_id": 1, "user_name": "user_name", "create_at": "2014-02-22T19:20+00:00", "parent_id": 1, "discussion_id": 1},
                        {"id": 2, "message": "message content 2", "user_id": 2, "user_name": "user_name", "create_at": "2014-02-22T19:20+00:00", "parent_id": 2, "discussion_id": 1}
                    ]
                },
                {
                    "id": 2,
                    "title": "title",
                    "description": "discussion description",
                    "messages": [
                        {"id": 3, "message": "message content 1", "user_id": 3, "user_name": "user_name", "create_at": "2014-02-22T19:20+00:00", "parent_id": 1, "discussion_id": 2},
                        {"id": 4, "message": "message content 2", "user_id": 4, "user_name": "user_name", "create_at": "2014-02-22T19:20+00:00", "parent_id": 1, "discussion_id": 2}
                    ]
                }
            ]
        }
        
       
## Discussions Collection [/discussions]
### Create new Discussion thread [POST]
+ Request (application/json)

        {"token": "user_token", "title": "Discussion title", "description": "description"}

+ Response 200 (application/json)
        
        {"id": "1"}

## Discussion [/discussion/{discussionId}/messages/{?page}{?per_page}]
### Get list messages [GET]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10

+ Response 200 (application/json)

        {
            "error": null,
            "message": "",
            "data": [
                {"id": 1, 
                "message": "message content 1", 
                "user_name": "user_name 1",
                "user_id": 1, 
                "parent_id": 1,
                "discussion_id": 1,
                "create_at": "2014-02-22T19:20+00:00"
                },
                {
                    "id": 2,
                    "message": "Message content 2",
                    "user_id": 2,
                    "user_name": "user_name 2",
                    "parent_id": 2,
                    "discussion_id": 1,
                    "create_at": "2014-02-22T19:20+00:00"
                }
             ]
        }
        
        
### Create a message [POST]
+ Request (application/json)

        {"token": "user_token", "message": "message"}
    
+ Response 200

        {"id": "1", "create_at": "2014-02-22T19:20+00:00"}
        
## Message [/discussion/{discussionId}/messages/{messageId}]     
### Delete a message [DELETE]
+ Request (application/json)

        {"token": "user_token"}
    
+ Response 200

# Group Users
3 types (MEMBER, COACH, COMMUNITY)

## Login [/login]
### Login [POST]
+ Request (application/json)
    
        {"username": "username", "password": "password"}
    
+ Response 200 (application/json)

        {
            "errors":null, 
            "message":"", 
            "data":{
                "id": "user_id",
                "type_id": 2, 
                "status_id": 1,
                "username": "username", 
                "token": "access token", 
                "expiry_in": 20160
            }
        }

## Reset password [/resetpass]
### Reset password [POST]
+ Request (application/json)
    
        {"email": "user_email"}
    
+ Response 200

        {
            "errors": null, 
            "message": "Please check your email to get link to password reset page", 
            "data": null
        }

## Change password [/changepass]
### Change password [POST]
+ Request (application/json)
    
        {"old_password": "old_password", "new_password": "new_password", "new_password_confirmation": "new_password"}
    
+ Response 200

        {
            "errors": null, 
            "message": "Your password has been changed.", 
            "data": null
        }

## Users Collection [/users/{?page}{?per_page}{?name}{?sort}{?order}]
### Get list Contacts [GET]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    + sort (optional, string, `first_name` ) ... sort by field name. Ex: id, first_name, created_at
    + order (optional, string, `desc` ) ... Sort direction. Only allow 'desc|asc'
    + name (optional, string, `loc` ) ... 
+ Response 200 (application/json)
        
        {
            "message": null,
            "data": [
                    {
                        "id": 3, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1,
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title", 
                        "organization": "organization", 
                        "created_at": "2014-02-22T19:20+00:00", 
                        "interested_count": 100,
                        "recommended_count": 100    
                    },
                    {
                        "id": 2, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1,
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title", 
                        "organization": "organization", 
                        "created_at": "2014-02-22T19:20+00:00", 
                        "interested_count": 100,
                        "recommended_count": 100
                    },
                    {
                        "id": 1, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1,
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title", 
                        "organization": "organization", 
                        "created_at": "2014-02-22T19:20+00:00", 
                        "interested_count": 100,
                        "recommended_count": 100
                    }
                ]
            ,
            "errors": null
        }

## User [/users/{user_id}]
### Get user's detail [GET]
+ Response 200 (application/json)

        {
            "message": null,
            "data": {
                "id": 3, 
                "type_id": 4, 
                "status_id": 1,
                "gender": 1, 
                "username": "user_name", 
                "email": "email",
                "first_name": "First name",
                "last_name": "Last name",
                "name_title": "Mr",
                "job_title": "job title", 
                "organization": "organization", 
                "created_at": "2014-02-22T19:20+00:00",
                "updated_at": "2014-02-22T19:20+00:00", 
                "interested": "false",
                "interested_count": 100,
                "recommended": "false",
                "recommended_count": 100,
                "summary": "summary",
                "business_interest": "Business interest",
                "discussion_histories":[
                    {
                        "id": 1,
                        "discussion": {
                            "id": 1,
                            "title": "title of discussion 1",
                            "description": "discription of discussion 1",
                            "type_title":"Article"
                        },
                        "action": "CREATE",
                        "created_at": "2014-02-22T19:20+00:00"
                    },
                    {
                        "id": 2,
                        "discussion": {
                            "id": 1,
                            "title": "title of discussion 1",
                            "description": "discription of discussion 1",
                            "type_title":"Discussion"
                        },
                        "comment": {
                            "id": 1,
                            "content": "content of comment"
                        },
                        "action": "ANSWER",
                        "created_at": "2014-02-22T19:20+00:00"
                    }
                ],
                "recommendations": [
                    {"id": 1, "message": "message content 1", "user_id": 1, "created_at": "2014-02-22T19:20+00:00"},
                    {"id": 2, "message": "message content 2", "user_id": 2, "created_at": "2014-02-22T19:20+00:00"}
                ]
            },
            "errors": null
        }

### Edit user's information [POST]
+ Request (application/json)
        
        {
            "first_name": "",
            "last_name": "",
            "gender": "",
            "job_title": "job title", 
            "organization": "organization", 
            "email": "email",
            "summary": "summary",
            "business_interest": "Business interest"
        }
        
+ Response 200
    
        {
            "message": null,
            "data": {
                "id": 3, 
                "type_id": 4, 
                "status_id": 1,
                "gender": 1, 
                "username": "user_name", 
                "email": "email",
                "first_name": "First name",
                "last_name": "Last name",
                "name_title": "Mr",
                "job_title": "job title", 
                "organization": "organization", 
                "created_at": "2014-02-22T19:20+00:00",  
                "updated_at": "2014-02-22T19:20+00:00", 
                "interested_count": 100,
                "recommended_count": 100,
                "summary": "summary",
                "business_interest": "Business interest"
            },
            "errors": null
        }

## Update user avatar [/users/{user_id}/avatar]
### get user avatar [GET]

+ Response 200 (image/*)

### Update user avatar [POST]
+ Request (multipart/form-data)

        {
            "avatar": ""
        }
        
+ Response 200
        
## User's discussion histories [/users/{user_id}/discussion_histories/{?page}{?per_page}{?sort}{?order}]
### Get list all user discussion histories [GET]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    + sort (optional, string, `created_at` ) ... sort by field name. Ex: id, created_at
    + order (optional, string, `desc` ) ... Sort direction. Only allow 'desc|asc'
+ Response 200 (application/json)
    
        {
            "message": null,
            "errors": null,
            "data": [
                {
                    "id": 1,
                    "discussion": {
                        "id": 1,
                        "title": "title of discussion 1",
                        "description": "discription of discussion 1",
                        "type_title":"Article"
                    },
                    "action": "CREATE",
                    "created_at": "2014-02-22T19:20+00:00"
                },
                {
                    "id": 2,
                    "discussion": {
                        "id": 1,
                        "title": "title of discussion 1",
                        "description": "discription of discussion 1",
                        "type_title":"Discussion"
                    },
                    "comment": {
                        "id": 1,
                        "content": "content of comment"
                    },
                    "action": "ANSWER",
                    "created_at": "2014-02-22T19:20+00:00"
                }
            ],
            "extra_data": {
                "total": 4,
                "per_page": 10,
                "current_page": 1,
                "last_page": 1,
                "from": 1,
                "to": 4,
            }   
        }
        
## User's recommendations [/users/{user_id}/recommendations/{?page}{?per_page}{?sort}{?order}]
### Get list all user recommendations [GET]
+ Parameters
    + page (optional, number, `1` ) ... Default value: 1
    + per_page (optional, number, `10` ) ... Default value: 10
    + sort (optional, string, `created_at` ) ... sort by field name. Ex: id, created_at
    + order (optional, string, `desc` ) ... Sort direction. Only allow 'desc|asc'
+ Response 200 (application/json)

        {
            "message": null,
            "errors": null,
            "data": [
                {
                    "id": 1, 
                    "message": "message content 1", 
                    "is_visible": true,
                    "created_by_user": {
                        "id": 3, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1, 
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title"
                    },
                    "created_at": "2014-02-22T19:20+00:00"
                },
                {
                    "id": 2, 
                    "message": "message content 2", 
                    "is_visible": true,
                    "created_by_user": {
                        "id": 3, 
                        "type_id": 4, 
                        "status_id": 1,
                        "gender": 1, 
                        "username": "user_name", 
                        "email": "email",
                        "first_name": "First name",
                        "last_name": "Last name",
                        "name_title": "Mr",
                        "job_title": "job title"
                    },
                    "created_at": "2014-02-22T19:20+00:00"
                }
            ]
        }

## Recommendation [/users/{user_id}/recommendations]         
### create/update a recommendation [POST]
Just update field in json.
+ Request (application/json)

        {"token": "user_token", "message": "message"}

+ Response 200 (application/json)

        {"id": "id", "create_at": "2014-02-22T19:20+00:00"}
        
### Delete recommendation [DELETE]
+ Request (application/json)

        {"token": "user_token"}

+ Response 200

## Group User's Action [/users/action]
Types of user action: SHARE, FOLLOW/UNFOLLOW(other user), RATE, ATTENDANT(event), HIDE/SHOW recommendation.
### Create a user action [POST]
+ Request (application/json)

        {
            "action_id": 1,
            "target_id": 1,
            "target_type_id": 1
        }
        
+ Response 200

# Group Notifications
Notification will have 3 types: USER_ACTION, NEW_ARTICLE and NEW_EVENT.
content_type: BLOG, LESSON, ARTICLE.
## Notifications Collection [/notifications]
### Get list all notifications [GET]
+ Request (application/json)
    
        {"token": "user_token"}
    
+ Response 200 (applicaion/json)

        [
            {"id", "type": "USER_ACTION", "content_id": "content_id", "conten_title": "content_title", 
            "create_at": "2014-02-22T19:20+00:00", "content_type": "BLOG"}, 
            {"id", "type": "USER_ACTION", "content_id": "content_id", "conten_title": "content_title", 
            "create_at": "2014-02-22T19:20+00:00", "content_type": "LESSON"}
        ]